name: 'Append BuildX nodes'
description: 'Appends docker buildx nodes to an already setup buildex builder.'

inputs:
  builder:
    description: "The builder name from the previous step"
    default: ""
    required: true
  platform:
    description: "For what platform to add the new node (defaults to `linux/arm64`)"
    default: "linux/arm64"
    required: false
  node_name:
    description: "The name of the new node (defaults to `arm`)"
    default: "arm"
    required: false
  driver_opt:
    description: "Some --driver-opt settings - i.e. `nodeselector=kubernetes.io/arch=arm64`"
    default: ""
    required: false
  endpoint:
    description: "An endpoint/context for this node - i.e. `ssh://user@docker-instance.example.com`"
    default: ""
    required: false
  ssh_private_key:
    description: "If the endpoint is a ssh:// endpoint, load this private key"
    default: ""
    required: false

runs:
  using: "composite"
  steps:
    - env:
        BUILDER_NAME: ${{ inputs.builder }}
        NODE_PLATFORM: ${{ inputs.platform }}
        NODE_NAME: ${{ inputs.node_name }}
        DRIVER_OPT: ${{ inputs.driver_opt }}
        ENDPOINT: ${{ inputs.endpoint }}
        SSH_PRIVATE_KEY: ${{ inputs.ssh_private_key }}
      shell: bash
      id: composer_run
      run: |
        #!/bin/bash
        set -e
        
        # Load the SSH key to access the remote Docker host if provided
        if [ -n "$SSH_PRIVATE_KEY" ]; then
          echo "Setting up SSH for Docker..."
          mkdir -p ~/.ssh
          cat <<EOF > ~/.ssh/config
        Host *
           StrictHostKeyChecking no
           UserKnownHostsFile=/dev/null
           ControlMaster auto
           ControlPath ~/.ssh/control-%C
           ControlPersist yes
        EOF
          eval $(ssh-agent -s)
          ssh-add <(echo "$SSH_PRIVATE_KEY")
          echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >> $GITHUB_ENV
        fi
        
        # Test connection to the specified Docker endpoint if provided
        if [ -n "$ENDPOINT" ]; then
          echo "Testing connection to $ENDPOINT..."
          if ! docker -H $ENDPOINT info; then
            echo "Failed to connect to the Docker endpoint: $ENDPOINT"
            exit 1
          fi
        fi
        
        # Configure Docker Buildx
        # Note: Docker Buildx should be set up to allow parallel builds if supported
        BUILDX_OPTS=
        if [ -n "$DRIVER_OPT" ]; then
          BUILDX_OPTS="--driver-opt $DRIVER_OPT"
        fi
        
        # Check if the builder exists and create or append to the builder accordingly
        if ! docker buildx inspect $BUILDER_NAME > /dev/null 2>&1; then
          echo "Creating new builder $BUILDER_NAME with node $NODE_NAME..."
          docker buildx create --name $BUILDER_NAME --platform $NODE_PLATFORM $BUILDX_OPTS $ENDPOINT
        else
          echo "Appending node $NODE_NAME to builder $BUILDER_NAME..."
          docker buildx create --append --name $BUILDER_NAME \
              --node $NODE_NAME --platform $NODE_PLATFORM \
              $BUILDX_OPTS $ENDPOINT
        fi
        
        # Bootstrap the builder to make sure it's active
        docker buildx use $BUILDER_NAME
        docker buildx inspect --bootstrap
        
        # Output the current configuration
        docker buildx ls
        
        # Insert your build commands here
        # Example: docker buildx build -t my-image:latest . --push
        
        echo "Build setup complete."

branding:
  icon: 'package'
  color: 'purple'
